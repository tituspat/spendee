name: CI Pipeline

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Create .env file
        run: echo "SITE_URL=http://ec2-54-169-205-92.ap-southeast-1.compute.amazonaws.com:3000" >> .env

      - name: Login to Dockerhub
        env:
          DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      - name: Build the Docker image
        run: docker build -t pat0112/spendy .
      - name: Push to Dockerhub
        run: docker push pat0112/spendy:latest

  provision-ec2:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.TF_USER_AWS_KEY }}'
          aws-secret-access-key: '${{ secrets.TF_USER_AWS_SECRET }}'
          aws-region: ap-southeast-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve

      - name: wait 30s
        run: sleep 30

      - name: Get Instance IP
        id: instance_ip
        run: |
          INSTANCE_IP=$(terraform output -raw instance_ip)
          echo "::set-output name=instance_ip::$INSTANCE_IP"
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
          echo ${{ env.INSTANCE_IP }}

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Get SSH Private Key
        id: ssh_private_key
        run: |
          SSH_PRIVATE_KEY=$(terraform show -json | jq -r '.value.root_module.resources[] | select(.type == "tls_private_key" and .name == "rsa_4096") | .values.private_key_pem')
          echo "${SSG_PRIVATE_KEY}" > ssh_private_key.pem
          chmod 600 ssh_private_key.pem
          echo "::set-output name=ssh_private_key::ssh_private_key.pem"
          echo "$SSH_PRIVATE_KEY"

      - name: Push Docker Image to EC2 Instance
        shell: /usr/bin/bash -e {0}
        env:
          AWS_REGION: ap-southeast-1
          TF_VAR_access_key: ${{ secrets.TF_USER_AWS_KEY}}
          TF_VAR_secret-key: '${{ secrets.TF_USER_AWS_SECRET }}'
          INSTANCE_IP: ${{ env.INSTANCE_IP }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_private_key.pem ubuntu@${{env.INSTANCE_IP}} '
            sudo apt-get update
            sudo apt_get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ubuntu
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{secrets.DOCKER_PASSWORD}}
            sudo docker pull ${{secrets.DOCKER_USERNAME}}/spendy:lastest
            sudo docker run -d -p 3000:3000 ${{secrets.DOCKER_USERNAME}}/spendy:lastest'

  # deploy:
  #   needs: [build]
  #   runs-on: self-hosted

  #   steps:
  #     - name: Delete Old docker container
  #       run: sudo docker rm -f spendy-container
  #     - name: Pull Docker image
  #       run: sudo docker pull pat0112/spendy:latest
  #     - name: Run Docker Container
  #       run: sudo docker run -d -p 3000:3000 --name spendy-container pat0112/spendy
